{
    "database-b8b8ebcf851d-2017-04-11": {
        "sha": "b8b8ebcf851d",
        "date": "2017-04-11",
        "new_vulns": [
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "a7da5a0486bc3379aa6acb29997bb63bdaaf7cc2",
                "author": "Frank Li",
                "email": "lif@google.com",
                "date": "Wed Jun 29 12:54:32 2016 -0800",
                "file_path": "tensorflow/contrib/opt/python/training/variable_clipping_optimizer_test.py",
                "line": 42,
                "title": "py/bind-socket-all-network-interfaces",
                "message": "'' binds a socket to all interfaces.",
                "preview": [
                    "      try:\n",
                    "        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n",
                    "      except IOError:\n",
                    "        s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n",
                    "      s.bind((\"\", 0))\n",
                    "      port = s.getsockname()[1]\n",
                    "      s.close()\n",
                    "      return port\n",
                    "\n",
                    "    port1 = get_open_port()\n",
                    "    port2 = get_open_port()\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "b7f370e24222017ddc07af834ac1e99762e76e0e",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Feb 7 14:06:43 2017 -0800",
                "file_path": "tensorflow/python/debug/cli/curses_ui_test.py",
                "line": 88,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "    # Override the default path to the command history file to avoid test\n",
                    "    # concurrency issues.\n",
                    "    self._command_history_store = debugger_cli_common.CommandHistory(\n",
                    "        history_file_path=tempfile.mktemp())\n",
                    "\n",
                    "  # Below, override the _screen_ prefixed member methods that interact with the\n",
                    "  # actual terminal, so that the mock can run in a terminal-less environment.\n",
                    "\n",
                    "  # TODO(cais): Search for a way to have a mock terminal object that behaves\n",
                    "  # like the actual terminal, so that we can test the terminal interaction\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "9c390e1697fc463949b90ac4348254fdd482274b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Dec 13 15:42:32 2016 -0800",
                "file_path": "tensorflow/python/debug/cli/curses_ui_test.py",
                "line": 1223,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "                     ui.toasts[4])\n",
                    "    self.assertEqual(\"ERROR: Empty indices.\", ui.toasts[6])\n",
                    "\n",
                    "  def testWriteScreenOutputToFileWorks(self):\n",
                    "    output_path = tempfile.mktemp()\n",
                    "\n",
                    "    ui = MockCursesUI(\n",
                    "        40,\n",
                    "        80,\n",
                    "        command_sequence=[\n",
                    "            string_to_codes(\"babble -n 2>%s\\n\" % output_path),\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "9c390e1697fc463949b90ac4348254fdd482274b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Dec 13 15:42:32 2016 -0800",
                "file_path": "tensorflow/python/debug/cli/curses_ui_test.py",
                "line": 1260,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "    self.assertEqual([\"ERROR: Redirect file path is empty\"], ui.toasts)\n",
                    "    self.assertEqual(0, len(ui.unwrapped_outputs))\n",
                    "\n",
                    "  def testAppendingRedirectErrors(self):\n",
                    "    output_path = tempfile.mktemp()\n",
                    "\n",
                    "    ui = MockCursesUI(\n",
                    "        40,\n",
                    "        80,\n",
                    "        command_sequence=[\n",
                    "            string_to_codes(\"babble -n 2 >> %s\\n\" % output_path),\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "b2607d7c599c8d0d3eed3f712a02dc19eb7d2087",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Feb 14 07:39:49 2017 -0800",
                "file_path": "tensorflow/python/debug/lib/debug_data_test.py",
                "line": 193,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "class DebugDumpDirTest(test_util.TensorFlowTestCase):\n",
                    "\n",
                    "  def setUp(self):\n",
                    "    self._dump_root = tempfile.mktemp()\n",
                    "    os.mkdir(self._dump_root)\n",
                    "\n",
                    "  def tearDown(self):\n",
                    "    # Tear down temporary dump directory.\n",
                    "    shutil.rmtree(self._dump_root)\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "b2607d7c599c8d0d3eed3f712a02dc19eb7d2087",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Feb 14 07:39:49 2017 -0800",
                "file_path": "tensorflow/python/debug/lib/debug_data_test.py",
                "line": 202,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "    shutil.rmtree(self._dump_root)\n",
                    "\n",
                    "  def testDebugDumpDir_nonexistentDumpRoot(self):\n",
                    "    with self.assertRaisesRegexp(IOError, \"does not exist\"):\n",
                    "      debug_data.DebugDumpDir(tempfile.mktemp() + \"_foo\")\n",
                    "\n",
                    "  def testDebugDumpDir_invalidFileNamingPattern(self):\n",
                    "    # File name with too few underscores should lead to an exception.\n",
                    "    open(os.path.join(self._dump_root, \"node1_DebugIdentity_1234\"), \"wb\")\n",
                    "\n",
                    "    with self.assertRaisesRegexp(ValueError,\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "9c390e1697fc463949b90ac4348254fdd482274b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Dec 13 15:42:32 2016 -0800",
                "file_path": "tensorflow/python/debug/cli/debugger_cli_common_test.py",
                "line": 253,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "        [\"Roses are red\", \"Violets are blue\"],\n",
                    "        font_attr_segs={0: [(0, 5, \"red\")],\n",
                    "                        1: [(0, 7, \"blue\")]})\n",
                    "\n",
                    "    file_path = tempfile.mktemp()\n",
                    "    screen_output.write_to_file(file_path)\n",
                    "\n",
                    "    with gfile.Open(file_path, \"r\") as f:\n",
                    "      self.assertEqual(\"Roses are red\\nViolets are blue\\n\", f.read())\n",
                    "\n",
                    "    # Clean up.\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "b7f370e24222017ddc07af834ac1e99762e76e0e",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Feb 7 14:06:43 2017 -0800",
                "file_path": "tensorflow/python/debug/cli/debugger_cli_common_test.py",
                "line": 925,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "class CommandHistoryTest(test_util.TensorFlowTestCase):\n",
                    "\n",
                    "  def setUp(self):\n",
                    "    self._history_file_path = tempfile.mktemp()\n",
                    "    self._cmd_hist = debugger_cli_common.CommandHistory(\n",
                    "        limit=3, history_file_path=self._history_file_path)\n",
                    "\n",
                    "  def tearDown(self):\n",
                    "    if os.path.isfile(self._history_file_path):\n",
                    "      os.remove(self._history_file_path)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "5c93dbdb336e762910717ecdadd7d48a8e629115",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Fri Oct 14 10:02:44 2016 -0800",
                "file_path": "tensorflow/python/debug/wrappers/local_cli_wrapper.py",
                "line": 76,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "    framework.BaseDebugWrapperSession.__init__(self, sess)\n",
                    "\n",
                    "    if not dump_root:\n",
                    "      self._dump_root = tempfile.mktemp(prefix=_DUMP_ROOT_PREFIX)\n",
                    "    else:\n",
                    "      if os.path.isfile(dump_root):\n",
                    "        raise ValueError(\"dump_root path points to a file: %s\" % dump_root)\n",
                    "      elif os.path.isdir(dump_root) and os.listdir(dump_root):\n",
                    "        raise ValueError(\"dump_root path points to a non-empty directory: %s\" %\n",
                    "                         dump_root)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "5c93dbdb336e762910717ecdadd7d48a8e629115",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Fri Oct 14 10:02:44 2016 -0800",
                "file_path": "tensorflow/python/debug/wrappers/local_cli_wrapper_test.py",
                "line": 103,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "class LocalCLIDebugWrapperSessionTest(test_util.TensorFlowTestCase):\n",
                    "\n",
                    "  def setUp(self):\n",
                    "    self._tmp_dir = tempfile.mktemp()\n",
                    "\n",
                    "    self.v = variables.Variable(10.0, name=\"v\")\n",
                    "    self.w = variables.Variable(21.0, name=\"w\")\n",
                    "    self.delta = constant_op.constant(1.0, name=\"delta\")\n",
                    "    self.inc_v = state_ops.assign_add(self.v, self.delta, name=\"inc_v\")\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "6c6121d09966e088a8a60263c010873ede6023d4",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Fri Jan 6 09:03:31 2017 -0800",
                "file_path": "tensorflow/python/debug/cli/readline_ui_test.py",
                "line": 149,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "    self.assertEqual(0, len(ui.observers[\"screen_outputs\"]))\n",
                    "    self.assertTrue(observer[\"callback_invoked\"])\n",
                    "\n",
                    "  def testIncompleteRedirectWorks(self):\n",
                    "    output_path = tempfile.mktemp()\n",
                    "\n",
                    "    ui = MockReadlineUI(\n",
                    "        command_sequence=[\"babble -n 2 > %s\" % output_path, \"exit\"])\n",
                    "\n",
                    "    ui.register_command_handler(\"babble\", self._babble, \"\")\n",
                    "    ui.run_ui()\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "1c5b5e8d8deb10ffc613aff016f4caaed7dc5b30",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Wed Mar 1 13:47:02 2017 -0800",
                "file_path": "tensorflow/python/debug/lib/source_utils_test.py",
                "line": 223,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      source_utils.annotate_source(self.dump, self.curr_file_path)\n",
                    "\n",
                    "  def testCallingAnnotateSourceOnUnrelatedSourceFileDoesNotError(self):\n",
                    "    # Create an unrelated source file.\n",
                    "    unrelated_source_path = tempfile.mktemp()\n",
                    "    with open(unrelated_source_path, \"wt\") as source_file:\n",
                    "      source_file.write(\"print('hello, world')\\n\")\n",
                    "\n",
                    "    self.assertEqual(\n",
                    "        {}, source_utils.annotate_source(self.dump, unrelated_source_path))\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "b8b8ebcf851df71ebb5209ae27d75e2befc50f0d",
                "author": "Francois Chollet",
                "email": "fchollet@google.com",
                "date": "Tue Apr 11 14:12:32 2017 -0800",
                "file_path": "tensorflow/contrib/keras/python/keras/utils/data_utils.py",
                "line": 112,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).\nThis file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "\n",
                    "    if is_match_fn(file_path):\n",
                    "      with open_fn(file_path) as archive:\n",
                    "        try:\n",
                    "          archive.extractall(path)\n",
                    "        except (tarfile.TarError, RuntimeError, KeyboardInterrupt):\n",
                    "          if os.path.exists(path):\n",
                    "            if os.path.isfile(path):\n",
                    "              os.remove(path)\n",
                    "            else:\n",
                    "              shutil.rmtree(path)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "2179890199c3561ff3a1297c5e9c073471473a77",
                "author": "Pete Warden",
                "email": "pete@petewarden.com",
                "date": "Fri Feb 12 15:50:54 2016 -0800",
                "file_path": "tensorflow/examples/image_retraining/retrain.py",
                "line": 305,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "                                             _progress)\n",
                    "    print()\n",
                    "    statinfo = os.stat(filepath)\n",
                    "    print('Successfully downloaded', filename, statinfo.st_size, 'bytes.')\n",
                    "  tarfile.open(filepath, 'r:gz').extractall(dest_directory)\n",
                    "\n",
                    "\n",
                    "def ensure_dir_exists(dir_name):\n",
                    "  \"\"\"Makes sure the folder exists on disk.\n",
                    "\n",
                    "  Args:\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-b8b8ebcf851d-2017-04-11",
                "sha": "8bf6ef1337359993a8be057c0dc90da8f5a6e4fa",
                "author": "A. Unique TensorFlower",
                "email": "nobody@tensorflow.org",
                "date": "Thu May 5 08:36:05 2016 -0800",
                "file_path": "tensorflow/contrib/learn/python/learn/datasets/text_datasets.py",
                "line": 41,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "  if not (gfile.Exists(train_path) and gfile.Exists(test_path)):\n",
                    "    archive_path = base.maybe_download(\n",
                    "        'dbpedia_csv.tar.gz', data_dir, DBPEDIA_URL)\n",
                    "    tfile = tarfile.open(archive_path, 'r:*')\n",
                    "    tfile.extractall(data_dir)\n",
                    "\n",
                    "\n",
                    "def load_dbpedia(size='small', test_with_fake_data=False):\n",
                    "  \"\"\"Get DBpedia datasets from CSV files.\"\"\"\n",
                    "  if not test_with_fake_data:\n",
                    "    data_dir = os.path.join(os.getenv('TF_EXP_BASE_DIR', ''), 'dbpedia_data')\n"
                ],
                "preview_index": 4,
                "new": true
            }
        ],
        "old_vulns": []
    },
    "database-da5091bf507b-2019-08-02": {
        "sha": "da5091bf507b",
        "date": "2019-08-02",
        "new_vulns": [
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "8530167f68673fa756565c0394bbe2dcdc39db05",
                "author": "Anton Dmitriev",
                "email": "dmitrievanthony@gmail.com",
                "date": "Fri Aug 24 16:52:07 2018 +0300",
                "file_path": "tensorflow/contrib/ignite/python/ops/ignite_dataset_ops.py",
                "line": 122,
                "title": "py/insecure-protocol",
                "message": "Insecure SSL/TLS protocol version TLSv1 allowed by [call to ssl.SSLContext](1).\nInsecure SSL/TLS protocol version TLSv1_1 allowed by [call to ssl.SSLContext](1).",
                "preview": [
                    "\n",
                    "    if certfile is not None:\n",
                    "      context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\n",
                    "      context.load_cert_chain(certfile, keyfile, password)\n",
                    "      self.sock = context.wrap_socket(self.sock)\n",
                    "    else:\n",
                    "      if keyfile is not None:\n",
                    "        raise ValueError(\"SSL is disabled, keyfile must not be specified \"\n",
                    "                         \"(to enable SSL specify certfile)\")\n",
                    "      if password is not None:\n",
                    "        raise ValueError(\"SSL is disabled, password must not be specified \"\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "44cf98028b635ff3dd4145df263b0706ba663924",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Thu May 4 19:11:23 2017 -0800",
                "file_path": "tensorflow/contrib/rnn/python/tools/checkpoint_convert_test.py",
                "line": 35,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "class CheckpointConvertTest(test.TestCase):\n",
                    "\n",
                    "  def setUp(self):\n",
                    "    self._old_ckpt_path = tempfile.mktemp()\n",
                    "    self._new_ckpt_path = tempfile.mktemp()\n",
                    "    ops.reset_default_graph()\n",
                    "\n",
                    "  def tearDown(self):\n",
                    "    for file_name in glob.glob(self._old_ckpt_path + \"*\"):\n",
                    "      os.remove(file_name)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "44cf98028b635ff3dd4145df263b0706ba663924",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Thu May 4 19:11:23 2017 -0800",
                "file_path": "tensorflow/contrib/rnn/python/tools/checkpoint_convert_test.py",
                "line": 36,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "class CheckpointConvertTest(test.TestCase):\n",
                    "\n",
                    "  def setUp(self):\n",
                    "    self._old_ckpt_path = tempfile.mktemp()\n",
                    "    self._new_ckpt_path = tempfile.mktemp()\n",
                    "    ops.reset_default_graph()\n",
                    "\n",
                    "  def tearDown(self):\n",
                    "    for file_name in glob.glob(self._old_ckpt_path + \"*\"):\n",
                    "      os.remove(file_name)\n",
                    "    for file_name in glob.glob(self._new_ckpt_path + \"*\"):\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "b7f370e24222017ddc07af834ac1e99762e76e0e",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Feb 7 14:06:43 2017 -0800",
                "file_path": "tensorflow/python/debug/cli/curses_ui_test.py",
                "line": 94,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "    # Override the default path to the command history file to avoid test\n",
                    "    # concurrency issues.\n",
                    "    self._command_history_store = debugger_cli_common.CommandHistory(\n",
                    "        history_file_path=tempfile.mktemp())\n",
                    "\n",
                    "  # Below, override the _screen_ prefixed member methods that interact with the\n",
                    "  # actual terminal, so that the mock can run in a terminal-less environment.\n",
                    "\n",
                    "  # TODO(cais): Search for a way to have a mock terminal object that behaves\n",
                    "  # like the actual terminal, so that we can test the terminal interaction\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "b2607d7c599c8d0d3eed3f712a02dc19eb7d2087",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Feb 14 07:39:49 2017 -0800",
                "file_path": "tensorflow/python/debug/lib/debug_data_test.py",
                "line": 154,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "class DebugDumpDirTest(test_util.TensorFlowTestCase):\n",
                    "\n",
                    "  def setUp(self):\n",
                    "    self._dump_root = tempfile.mktemp()\n",
                    "    os.mkdir(self._dump_root)\n",
                    "\n",
                    "  def tearDown(self):\n",
                    "    # Tear down temporary dump directory.\n",
                    "    shutil.rmtree(self._dump_root)\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "b2607d7c599c8d0d3eed3f712a02dc19eb7d2087",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Feb 14 07:39:49 2017 -0800",
                "file_path": "tensorflow/python/debug/lib/debug_data_test.py",
                "line": 186,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "        gpu_1_dir, \"node_foo_1_2_DebugIdentity_1472563253536387\"), \"wb\")\n",
                    "\n",
                    "  def testDebugDumpDir_nonexistentDumpRoot(self):\n",
                    "    with self.assertRaisesRegexp(IOError, \"does not exist\"):\n",
                    "      debug_data.DebugDumpDir(tempfile.mktemp() + \"_foo\")\n",
                    "\n",
                    "  def testDebugDumpDir_invalidFileNamingPattern(self):\n",
                    "    # File name with too few underscores should lead to an exception.\n",
                    "    device_dir = os.path.join(\n",
                    "        self._dump_root,\n",
                    "        debug_data.METADATA_FILE_PREFIX + debug_data.DEVICE_TAG +\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "8b0c84d30d957596cbb3bcac9245e114c3f0b65b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Jul 23 09:55:54 2019 -0700",
                "file_path": "tensorflow/python/debug/examples/debug_errors.py",
                "line": 45,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "  y = tf.matmul(m, x, name=\"y\")\n",
                    "  z = tf.matmul(m, v, name=\"z\")\n",
                    "\n",
                    "  if FLAGS.debug:\n",
                    "    config_file_path = (tempfile.mktemp(\".tfdbg_config\")\n",
                    "                        if FLAGS.use_random_config_path else None)\n",
                    "    sess = tf_debug.LocalCLIDebugWrapperSession(\n",
                    "        sess,\n",
                    "        ui_type=FLAGS.ui_type,\n",
                    "        config_file_path=config_file_path)\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "8b0c84d30d957596cbb3bcac9245e114c3f0b65b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Jul 23 09:55:54 2019 -0700",
                "file_path": "tensorflow/python/debug/examples/debug_keras.py",
                "line": 45,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "  sess = tf.Session()\n",
                    "  if FLAGS.debug:\n",
                    "    # Use the command-line interface (CLI) of tfdbg.\n",
                    "    config_file_path = (tempfile.mktemp(\".tfdbg_config\")\n",
                    "                        if FLAGS.use_random_config_path else None)\n",
                    "    sess = tf_debug.LocalCLIDebugWrapperSession(\n",
                    "        sess,\n",
                    "        ui_type=FLAGS.ui_type,\n",
                    "        config_file_path=config_file_path)\n",
                    "  elif FLAGS.tensorboard_debug_address:\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "8b0c84d30d957596cbb3bcac9245e114c3f0b65b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Jul 23 09:55:54 2019 -0700",
                "file_path": "tensorflow/python/debug/examples/debug_mnist.py",
                "line": 129,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "    raise ValueError(\n",
                    "        \"The --debug and --tensorboard_debug_address flags are mutually \"\n",
                    "        \"exclusive.\")\n",
                    "  if FLAGS.debug:\n",
                    "    config_file_path = (tempfile.mktemp(\".tfdbg_config\")\n",
                    "                        if FLAGS.use_random_config_path else None)\n",
                    "    sess = tf_debug.LocalCLIDebugWrapperSession(\n",
                    "        sess,\n",
                    "        ui_type=FLAGS.ui_type,\n",
                    "        config_file_path=config_file_path)\n",
                    "  elif FLAGS.tensorboard_debug_address:\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "8b0c84d30d957596cbb3bcac9245e114c3f0b65b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Jul 23 09:55:54 2019 -0700",
                "file_path": "tensorflow/python/debug/examples/debug_tflearn_iris.py",
                "line": 61,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "        \"The --debug and --tensorboard_debug_address flags are mutually \"\n",
                    "        \"exclusive.\")\n",
                    "  hooks = []\n",
                    "  if FLAGS.debug:\n",
                    "    config_file_path = (tempfile.mktemp(\".tfdbg_config\")\n",
                    "                        if FLAGS.use_random_config_path else None)\n",
                    "    hooks.append(tf_debug.LocalCLIDebugHook(ui_type=FLAGS.ui_type,\n",
                    "                                            dump_root=FLAGS.dump_root,\n",
                    "                                            config_file_path=config_file_path))\n",
                    "  elif FLAGS.tensorboard_debug_address:\n",
                    "    hooks.append(tf_debug.TensorBoardDebugHook(FLAGS.tensorboard_debug_address))\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "9c390e1697fc463949b90ac4348254fdd482274b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Dec 13 15:42:32 2016 -0800",
                "file_path": "tensorflow/python/debug/cli/debugger_cli_common_test.py",
                "line": 256,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "        [\"Roses are red\", \"Violets are blue\"],\n",
                    "        font_attr_segs={0: [(0, 5, \"red\")],\n",
                    "                        1: [(0, 7, \"blue\")]})\n",
                    "\n",
                    "    file_path = tempfile.mktemp()\n",
                    "    screen_output.write_to_file(file_path)\n",
                    "\n",
                    "    with gfile.Open(file_path, \"r\") as f:\n",
                    "      self.assertEqual(\"Roses are red\\nViolets are blue\\n\", f.read())\n",
                    "\n",
                    "    # Clean up.\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "b7f370e24222017ddc07af834ac1e99762e76e0e",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Feb 7 14:06:43 2017 -0800",
                "file_path": "tensorflow/python/debug/cli/debugger_cli_common_test.py",
                "line": 933,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "class CommandHistoryTest(test_util.TensorFlowTestCase):\n",
                    "\n",
                    "  def setUp(self):\n",
                    "    self._history_file_path = tempfile.mktemp()\n",
                    "    self._cmd_hist = debugger_cli_common.CommandHistory(\n",
                    "        limit=3, history_file_path=self._history_file_path)\n",
                    "\n",
                    "  def tearDown(self):\n",
                    "    if os.path.isfile(self._history_file_path):\n",
                    "      os.remove(self._history_file_path)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "f6c6a420461795560ac4fe454036b6dace4e4c9f",
                "author": "Shining Sun",
                "email": "shiningsun@google.com",
                "date": "Tue Apr 2 18:16:03 2019 -0700",
                "file_path": "tensorflow/python/keras/distribute/keras_utils_test.py",
                "line": 560,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "            'mse',\n",
                    "            experimental_run_tf_function=experimental_run_tf_function)\n",
                    "        model.fit(dataset, epochs=1, steps_per_epoch=1)\n",
                    "\n",
                    "        weights_file = tempfile.mktemp('.h5')\n",
                    "        model.save_weights(weights_file)\n",
                    "\n",
                    "        model_2 = keras_test_lib.get_model()\n",
                    "        model_2.compile(\n",
                    "            optimizer(),\n",
                    "            'mse',\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "f6c6a420461795560ac4fe454036b6dace4e4c9f",
                "author": "Shining Sun",
                "email": "shiningsun@google.com",
                "date": "Tue Apr 2 18:16:03 2019 -0700",
                "file_path": "tensorflow/python/keras/distribute/keras_utils_test.py",
                "line": 596,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "            'mse',\n",
                    "            experimental_run_tf_function=experimental_run_tf_function)\n",
                    "        model.fit(dataset, epochs=1, steps_per_epoch=1)\n",
                    "\n",
                    "        weights_file = tempfile.mktemp()\n",
                    "        model.save_weights(weights_file)\n",
                    "\n",
                    "        model_2 = keras_test_lib.get_model()\n",
                    "        model_2.compile(\n",
                    "            optimizer(),\n",
                    "            'mse',\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "3a6181ae34e73301247553983b406c8e01539b01",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Wed Dec 5 02:56:44 2018 -0800",
                "file_path": "tensorflow/python/saved_model/load_test.py",
                "line": 194,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "        imported_graph.get_operation_by_name(\"should_be_control_output\"),\n",
                    "        imported_graph.control_outputs)\n",
                    "\n",
                    "  def _make_asset(self, contents):\n",
                    "    filename = tempfile.mktemp(prefix=self.get_temp_dir())\n",
                    "    with open(filename, \"w\") as f:\n",
                    "      f.write(contents)\n",
                    "    return filename\n",
                    "\n",
                    "  @test_util.run_in_graph_and_eager_modes\n",
                    "  def test_assets(self, cycles):\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "5c93dbdb336e762910717ecdadd7d48a8e629115",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Fri Oct 14 10:02:44 2016 -0800",
                "file_path": "tensorflow/python/debug/wrappers/local_cli_wrapper.py",
                "line": 87,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "    framework.BaseDebugWrapperSession.__init__(\n",
                    "        self, sess, thread_name_filter=thread_name_filter)\n",
                    "\n",
                    "    if not dump_root:\n",
                    "      self._dump_root = tempfile.mktemp(prefix=_DUMP_ROOT_PREFIX)\n",
                    "    else:\n",
                    "      dump_root = os.path.expanduser(dump_root)\n",
                    "      if os.path.isfile(dump_root):\n",
                    "        raise ValueError(\"dump_root path points to a file: %s\" % dump_root)\n",
                    "      elif os.path.isdir(dump_root) and os.listdir(dump_root):\n",
                    "        raise ValueError(\"dump_root path points to a non-empty directory: %s\" %\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "5c93dbdb336e762910717ecdadd7d48a8e629115",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Fri Oct 14 10:02:44 2016 -0800",
                "file_path": "tensorflow/python/debug/wrappers/local_cli_wrapper_test.py",
                "line": 142,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "@test_util.run_v1_only(\"b/120545219\")\n",
                    "class LocalCLIDebugWrapperSessionTest(test_util.TensorFlowTestCase):\n",
                    "\n",
                    "  def setUp(self):\n",
                    "    self._tmp_dir = tempfile.mktemp()\n",
                    "\n",
                    "    self.v = variables.VariableV1(10.0, name=\"v\")\n",
                    "    self.w = variables.VariableV1(21.0, name=\"w\")\n",
                    "    self.delta = constant_op.constant(1.0, name=\"delta\")\n",
                    "    self.inc_v = state_ops.assign_add(self.v, self.delta, name=\"inc_v\")\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "dc1aab20a12e2d32a10f019a5de3f65f56345fa8",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Fri Oct 12 18:13:58 2018 -0700",
                "file_path": "tensorflow/python/kernel_tests/logging_ops_test.py",
                "line": 311,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      self.assertTrue((expected + \"\\n\") in printed.contents())\n",
                    "\n",
                    "  @test_util.run_in_graph_and_eager_modes()\n",
                    "  def testPrintTensorsToFile(self):\n",
                    "    tmpfile_name = tempfile.mktemp(\".printv2_test\")\n",
                    "    tensor_0 = math_ops.range(0, 10)\n",
                    "    print_op_0 = logging_ops.print_v2(tensor_0,\n",
                    "                                      output_stream=\"file://\"+tmpfile_name)\n",
                    "    self.evaluate(print_op_0)\n",
                    "    tensor_1 = math_ops.range(11, 20)\n",
                    "    print_op_1 = logging_ops.print_v2(tensor_1,\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "1cf9f7ab2fd019531629b266e7d0863b0d6417ce",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Sun Oct 15 18:15:53 2017 -0700",
                "file_path": "tensorflow/python/debug/cli/readline_ui_test.py",
                "line": 40,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "  def __init__(self, on_ui_exit=None, command_sequence=None):\n",
                    "    readline_ui.ReadlineUI.__init__(\n",
                    "        self, on_ui_exit=on_ui_exit,\n",
                    "        config=cli_config.CLIConfig(config_file_path=tempfile.mktemp()))\n",
                    "\n",
                    "    self._command_sequence = command_sequence\n",
                    "    self._command_counter = 0\n",
                    "\n",
                    "    self.observers = {\"screen_outputs\": []}\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "6c6121d09966e088a8a60263c010873ede6023d4",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Fri Jan 6 09:03:31 2017 -0800",
                "file_path": "tensorflow/python/debug/cli/readline_ui_test.py",
                "line": 171,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "    self.assertEqual(0, len(ui.observers[\"screen_outputs\"]))\n",
                    "    self.assertTrue(observer[\"callback_invoked\"])\n",
                    "\n",
                    "  def testIncompleteRedirectWorks(self):\n",
                    "    output_path = tempfile.mktemp()\n",
                    "\n",
                    "    ui = MockReadlineUI(\n",
                    "        command_sequence=[\"babble -n 2 > %s\" % output_path, \"exit\"])\n",
                    "\n",
                    "    ui.register_command_handler(\"babble\", self._babble, \"\")\n",
                    "    ui.run_ui()\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "1c5b5e8d8deb10ffc613aff016f4caaed7dc5b30",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Wed Mar 1 13:47:02 2017 -0800",
                "file_path": "tensorflow/python/debug/lib/source_utils_test.py",
                "line": 211,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      source_utils.annotate_source(self.dump, self.curr_file_path)\n",
                    "\n",
                    "  def testCallingAnnotateSourceOnUnrelatedSourceFileDoesNotError(self):\n",
                    "    # Create an unrelated source file.\n",
                    "    unrelated_source_path = tempfile.mktemp()\n",
                    "    with open(unrelated_source_path, \"wt\") as source_file:\n",
                    "      source_file.write(\"print('hello, world')\\n\")\n",
                    "\n",
                    "    self.assertEqual({},\n",
                    "                     source_utils.annotate_source(self.dump,\n",
                    "                                                  unrelated_source_path))\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "c96841dbd199d3c1a15a89e8c44c7c1d164968b9",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Wed Sep 19 15:40:18 2018 -0700",
                "file_path": "tensorflow/python/framework/test_util.py",
                "line": 1833,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      made during this context.\n",
                    "    \"\"\"\n",
                    "    stream.flush()\n",
                    "    fd = stream.fileno()\n",
                    "    tmp_file_path = tempfile.mktemp(dir=self.get_temp_dir())\n",
                    "    tmp_file = open(tmp_file_path, \"w\")\n",
                    "    orig_fd = os.dup(fd)\n",
                    "    os.dup2(tmp_file.fileno(), fd)\n",
                    "    try:\n",
                    "      yield CapturedWrites(tmp_file_path)\n",
                    "    finally:\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "61c6c84964b4aec80aeace187aab8cb2c3e55a72",
                "author": "Austin Anderson",
                "email": "angerson@google.com",
                "date": "Wed Oct 31 14:16:59 2018 -0700",
                "file_path": "tensorflow/lite/schema/upgrade_schema_test.py",
                "line": 257,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "class TestSchemaUpgrade(test_util.TensorFlowTestCase):\n",
                    "\n",
                    "  def testNonExistentFile(self):\n",
                    "    converter = upgrade_schema_lib.Converter()\n",
                    "    non_existent = tempfile.mktemp(suffix=\".json\")\n",
                    "    with self.assertRaisesRegexp(IOError, \"No such file or directory\"):\n",
                    "      converter.Convert(non_existent, non_existent)\n",
                    "\n",
                    "  def testInvalidExtension(self):\n",
                    "    converter = upgrade_schema_lib.Converter()\n",
                    "    invalid_extension = tempfile.mktemp(suffix=\".foo\")\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "61c6c84964b4aec80aeace187aab8cb2c3e55a72",
                "author": "Austin Anderson",
                "email": "angerson@google.com",
                "date": "Wed Oct 31 14:16:59 2018 -0700",
                "file_path": "tensorflow/lite/schema/upgrade_schema_test.py",
                "line": 263,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      converter.Convert(non_existent, non_existent)\n",
                    "\n",
                    "  def testInvalidExtension(self):\n",
                    "    converter = upgrade_schema_lib.Converter()\n",
                    "    invalid_extension = tempfile.mktemp(suffix=\".foo\")\n",
                    "    with self.assertRaisesRegexp(ValueError, \"Invalid extension on input\"):\n",
                    "      converter.Convert(invalid_extension, invalid_extension)\n",
                    "    with tempfile.NamedTemporaryFile(suffix=\".json\", mode=\"w+\") as in_json:\n",
                    "      JsonDumpAndFlush(EMPTY_TEST_SCHEMA_V1, in_json)\n",
                    "      with self.assertRaisesRegexp(ValueError, \"Invalid extension on output\"):\n",
                    "        converter.Convert(in_json.name, invalid_extension)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "7ece1c0b8e527d59d8082cd6428cd255e5700074",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Wed Nov 1 11:55:32 2017 -0700",
                "file_path": "tensorflow/contrib/model_pruning/examples/cifar10/cifar10_pruning.py",
                "line": 403,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "    print()\n",
                    "    statinfo = os.stat(filepath)\n",
                    "    print('Successfully downloaded', filename, statinfo.st_size, 'bytes.')\n",
                    "\n",
                    "  tarfile.open(filepath, 'r:gz').extractall(dest_directory)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "e1a7a2ded90fbbdfc3a41954a332a04c73dd62c6",
                "author": "Xuechen Li",
                "email": "lxuechen@google.com",
                "date": "Tue Jun 19 16:35:36 2018 -0700",
                "file_path": "tensorflow/contrib/eager/python/examples/revnet/cifar_tfrecords.py",
                "line": 51,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "  if not tf.gfile.Exists(data_dir):\n",
                    "    tf.gfile.MakeDirs(data_dir)\n",
                    "\n",
                    "  urllib.request.urlretrieve(url, filepath)\n",
                    "  tarfile.open(os.path.join(filepath), 'r:gz').extractall(data_dir)\n",
                    "  return filepath\n",
                    "\n",
                    "\n",
                    "def _int64_feature(value):\n",
                    "  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "609b2ce3fe8ebecf4031670b8c2186468369b0ba",
                "author": "Pavithra Vijay",
                "email": "psv@google.com",
                "date": "Thu May 17 21:36:39 2018 -0700",
                "file_path": "tensorflow/python/keras/utils/data_utils.py",
                "line": 138,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).\nThis file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "\n",
                    "    if is_match_fn(file_path):\n",
                    "      with open_fn(file_path) as archive:\n",
                    "        try:\n",
                    "          archive.extractall(path)\n",
                    "        except (tarfile.TarError, RuntimeError, KeyboardInterrupt):\n",
                    "          if os.path.exists(path):\n",
                    "            if os.path.isfile(path):\n",
                    "              os.remove(path)\n",
                    "            else:\n",
                    "              shutil.rmtree(path)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "0c6fd1703eb8f990c8b071471b0105339ccf821d",
                "author": "Pete Warden",
                "email": "petewarden@google.com",
                "date": "Fri Aug 11 14:30:43 2017 -0700",
                "file_path": "tensorflow/examples/speech_commands/input_data.py",
                "line": 243,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "      print()\n",
                    "      statinfo = os.stat(filepath)\n",
                    "      tf.compat.v1.logging.info('Successfully downloaded %s (%d bytes)',\n",
                    "                                filename, statinfo.st_size)\n",
                    "      tarfile.open(filepath, 'r:gz').extractall(dest_directory)\n",
                    "\n",
                    "  def prepare_data_index(self, silence_percentage, unknown_percentage,\n",
                    "                         wanted_words, validation_percentage,\n",
                    "                         testing_percentage):\n",
                    "    \"\"\"Prepares a list of the samples organized by set and label.\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "8bf6ef1337359993a8be057c0dc90da8f5a6e4fa",
                "author": "A. Unique TensorFlower",
                "email": "nobody@tensorflow.org",
                "date": "Thu May 5 08:36:05 2016 -0800",
                "file_path": "tensorflow/contrib/learn/python/learn/datasets/text_datasets.py",
                "line": 48,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "  if not (gfile.Exists(train_path) and gfile.Exists(test_path)):\n",
                    "    archive_path = base.maybe_download(\n",
                    "        'dbpedia_csv.tar.gz', data_dir, DBPEDIA_URL)\n",
                    "    tfile = tarfile.open(archive_path, 'r:*')\n",
                    "    tfile.extractall(data_dir)\n",
                    "\n",
                    "\n",
                    "@deprecated(None, 'See contrib/learn/README.md')\n",
                    "def load_dbpedia(size='small', test_with_fake_data=False):\n",
                    "  \"\"\"Get DBpedia datasets from CSV files.\"\"\"\n",
                    "  if not test_with_fake_data:\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "c1731614e10e5b2a8e77f1ee4565b3185541483c",
                "author": "Yong Tang",
                "email": "yong.tang.github@outlook.com",
                "date": "Sat Aug 11 21:53:56 2018 +0000",
                "file_path": "tensorflow/python/lib/io/file_io_test.py",
                "line": 609,
                "title": "py/overly-permissive-file",
                "message": "Overly permissive mask in chmod sets file to world writable.",
                "preview": [
                    "    self.assertItemsEqual(\n",
                    "        file_io.get_matching_files(os.path.join(dir_path, \"*\", \"file*.txt\")),\n",
                    "        expected_match)\n",
                    "    # Change noread back so that it could be cleaned during tearDown.\n",
                    "    os.chmod(noread_path, 0o777)\n",
                    "\n",
                    "  def testFileSeekableWithZip(self):\n",
                    "    # Note: Test case for GitHub issue 27276, issue only exposed in python 3.7+.\n",
                    "    filename = os.path.join(self._base_dir, \"a.npz\")\n",
                    "    np.savez_compressed(filename, {\"a\": 1, \"b\": 2})\n",
                    "    with gfile.GFile(filename, \"rb\") as f:\n"
                ],
                "preview_index": 4,
                "new": true
            }
        ],
        "old_vulns": [
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "a7da5a0486bc3379aa6acb29997bb63bdaaf7cc2",
                "author": "Frank Li",
                "email": "lif@google.com",
                "date": "Wed Jun 29 12:54:32 2016 -0800",
                "file_path": "tensorflow/contrib/opt/python/training/variable_clipping_optimizer_test.py",
                "line": 42,
                "title": "py/bind-socket-all-network-interfaces",
                "message": "'' binds a socket to all interfaces.",
                "preview": [
                    "      try:\n",
                    "        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n",
                    "      except IOError:\n",
                    "        s = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n",
                    "      s.bind((\"\", 0))\n",
                    "      port = s.getsockname()[1]\n",
                    "      s.close()\n",
                    "      return port\n",
                    "\n",
                    "    port1 = get_open_port()\n",
                    "    port2 = get_open_port()\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "9c390e1697fc463949b90ac4348254fdd482274b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Dec 13 15:42:32 2016 -0800",
                "file_path": "tensorflow/python/debug/cli/curses_ui_test.py",
                "line": 1223,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "                     ui.toasts[4])\n",
                    "    self.assertEqual(\"ERROR: Empty indices.\", ui.toasts[6])\n",
                    "\n",
                    "  def testWriteScreenOutputToFileWorks(self):\n",
                    "    output_path = tempfile.mktemp()\n",
                    "\n",
                    "    ui = MockCursesUI(\n",
                    "        40,\n",
                    "        80,\n",
                    "        command_sequence=[\n",
                    "            string_to_codes(\"babble -n 2>%s\\n\" % output_path),\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-da5091bf507b-2019-08-02",
                "sha": "9c390e1697fc463949b90ac4348254fdd482274b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Dec 13 15:42:32 2016 -0800",
                "file_path": "tensorflow/python/debug/cli/curses_ui_test.py",
                "line": 1260,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "    self.assertEqual([\"ERROR: Redirect file path is empty\"], ui.toasts)\n",
                    "    self.assertEqual(0, len(ui.unwrapped_outputs))\n",
                    "\n",
                    "  def testAppendingRedirectErrors(self):\n",
                    "    output_path = tempfile.mktemp()\n",
                    "\n",
                    "    ui = MockCursesUI(\n",
                    "        40,\n",
                    "        80,\n",
                    "        command_sequence=[\n",
                    "            string_to_codes(\"babble -n 2 >> %s\\n\" % output_path),\n"
                ],
                "preview_index": 4,
                "new": false
            }
        ]
    },
    "database-d25dd807485c-2020-01-03": {
        "sha": "d25dd807485c",
        "date": "2020-01-03",
        "new_vulns": [
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "a698a494b0691523d1bf75e907f85a7ed73b6858",
                "author": "Jacques Pienaar",
                "email": "jpienaar@google.com",
                "date": "Mon Nov 18 12:13:49 2019 -0800",
                "file_path": "tensorflow/compiler/mlir/tensorflow/tests/tf_saved_model/common.py",
                "line": 82,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      raise app.UsageError('Too many command-line arguments.')\n",
                    "    if FLAGS.save_model_path:\n",
                    "      save_model_path = FLAGS.save_model_path\n",
                    "    else:\n",
                    "      save_model_path = tempfile.mktemp(suffix='.saved_model')\n",
                    "    save_options = tf.saved_model.SaveOptions(save_debug_info=show_debug_info)\n",
                    "    tf.saved_model.save(\n",
                    "        create_module_fn(), save_model_path, options=save_options)\n",
                    "    logging.info('Saved model to: %s', save_model_path)\n",
                    "    mlir = pywrap_tensorflow.experimental_convert_saved_model_to_mlir(\n",
                    "        save_model_path, ','.join(exported_names), show_debug_info)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "a25c899dcc938c36b2ca8b77393001cd59fd9b97",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Fri Dec 20 18:39:50 2019 -0800",
                "file_path": "tensorflow/compiler/mlir/tensorflow/tests/tf_saved_model/common_v1.py",
                "line": 71,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      raise app.UsageError('Too many command-line arguments.')\n",
                    "    if FLAGS.save_model_path:\n",
                    "      save_model_path = FLAGS.save_model_path\n",
                    "    else:\n",
                    "      save_model_path = tempfile.mktemp(suffix='.saved_model')\n",
                    "\n",
                    "    sess = tf.Session()\n",
                    "    sess.run(tf.initializers.global_variables())\n",
                    "    builder = tf.saved_model.builder.SavedModelBuilder(save_model_path)\n",
                    "    builder.add_meta_graph_and_variables(\n",
                    "        sess, [tf.saved_model.tag_constants.SERVING],\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "f6860cd3056d1f965e13472e148f3b990ab9c9b4",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Mon Sep 16 08:23:32 2019 -0700",
                "file_path": "tensorflow/python/debug/examples/v1/debug_errors.py",
                "line": 48,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "  z = tf.matmul(m, v, name=\"z\")\n",
                    "\n",
                    "  if FLAGS.debug:\n",
                    "    config_file_path = (\n",
                    "        tempfile.mktemp(\".tfdbg_config\")\n",
                    "        if FLAGS.use_random_config_path else None)\n",
                    "    sess = tf_debug.LocalCLIDebugWrapperSession(\n",
                    "        sess, ui_type=FLAGS.ui_type, config_file_path=config_file_path)\n",
                    "\n",
                    "  if FLAGS.error == \"shape_mismatch\":\n",
                    "    print(sess.run(y, feed_dict={ph_float: np.array([[0.0], [1.0], [2.0]])}))\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "f6860cd3056d1f965e13472e148f3b990ab9c9b4",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Mon Sep 16 08:23:32 2019 -0700",
                "file_path": "tensorflow/python/debug/examples/v1/debug_keras.py",
                "line": 48,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "  sess = tf.Session()\n",
                    "  if FLAGS.debug:\n",
                    "    # Use the command-line interface (CLI) of tfdbg.\n",
                    "    config_file_path = (\n",
                    "        tempfile.mktemp(\".tfdbg_config\")\n",
                    "        if FLAGS.use_random_config_path else None)\n",
                    "    sess = tf_debug.LocalCLIDebugWrapperSession(\n",
                    "        sess, ui_type=FLAGS.ui_type, config_file_path=config_file_path)\n",
                    "  elif FLAGS.tensorboard_debug_address:\n",
                    "    # Use the TensorBoard Debugger Plugin (GUI of tfdbg).\n",
                    "    sess = tf_debug.TensorBoardDebugWrapperSession(\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "f6860cd3056d1f965e13472e148f3b990ab9c9b4",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Mon Sep 16 08:23:32 2019 -0700",
                "file_path": "tensorflow/python/debug/examples/v1/debug_mnist_v1.py",
                "line": 218,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "        \"The --debug and --tensorboard_debug_address flags are mutually \"\n",
                    "        \"exclusive.\")\n",
                    "  if FLAGS.debug:\n",
                    "    config_file_path = (\n",
                    "        tempfile.mktemp(\".tfdbg_config\")\n",
                    "        if FLAGS.use_random_config_path else None)\n",
                    "    sess = tf_debug.LocalCLIDebugWrapperSession(\n",
                    "        sess, ui_type=FLAGS.ui_type, config_file_path=config_file_path)\n",
                    "  elif FLAGS.tensorboard_debug_address:\n",
                    "    sess = tf_debug.TensorBoardDebugWrapperSession(\n",
                    "        sess, FLAGS.tensorboard_debug_address)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "f6860cd3056d1f965e13472e148f3b990ab9c9b4",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Mon Sep 16 08:23:32 2019 -0700",
                "file_path": "tensorflow/python/debug/examples/v1/debug_tflearn_iris.py",
                "line": 66,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "        \"exclusive.\")\n",
                    "  hooks = []\n",
                    "  if FLAGS.debug:\n",
                    "    config_file_path = (\n",
                    "        tempfile.mktemp(\".tfdbg_config\")\n",
                    "        if FLAGS.use_random_config_path else None)\n",
                    "    hooks.append(\n",
                    "        tf_debug.LocalCLIDebugHook(\n",
                    "            ui_type=FLAGS.ui_type,\n",
                    "            dump_root=FLAGS.dump_root,\n",
                    "            config_file_path=config_file_path))\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "f6c6a420461795560ac4fe454036b6dace4e4c9f",
                "author": "Shining Sun",
                "email": "shiningsun@google.com",
                "date": "Tue Apr 2 18:16:03 2019 -0700",
                "file_path": "tensorflow/python/keras/distribute/keras_utils_test.py",
                "line": 532,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "            'mse',\n",
                    "            experimental_run_tf_function=experimental_run_tf_function)\n",
                    "        model.fit(dataset, epochs=1, steps_per_epoch=1)\n",
                    "\n",
                    "        weights_file = tempfile.mktemp('.h5')\n",
                    "        model.save_weights(weights_file)\n",
                    "\n",
                    "        model_2 = keras_test_lib.get_model()\n",
                    "        model_2.compile(\n",
                    "            optimizer(),\n",
                    "            'mse',\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "f6c6a420461795560ac4fe454036b6dace4e4c9f",
                "author": "Shining Sun",
                "email": "shiningsun@google.com",
                "date": "Tue Apr 2 18:16:03 2019 -0700",
                "file_path": "tensorflow/python/keras/distribute/keras_utils_test.py",
                "line": 568,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "            'mse',\n",
                    "            experimental_run_tf_function=experimental_run_tf_function)\n",
                    "        model.fit(dataset, epochs=1, steps_per_epoch=1)\n",
                    "\n",
                    "        weights_file = tempfile.mktemp()\n",
                    "        model.save_weights(weights_file)\n",
                    "\n",
                    "        model_2 = keras_test_lib.get_model()\n",
                    "        model_2.compile(\n",
                    "            optimizer(),\n",
                    "            'mse',\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "3a6181ae34e73301247553983b406c8e01539b01",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Wed Dec 5 02:56:44 2018 -0800",
                "file_path": "tensorflow/python/saved_model/load_test.py",
                "line": 197,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "        imported_graph.get_operation_by_name(\"should_be_control_output\"),\n",
                    "        imported_graph.control_outputs)\n",
                    "\n",
                    "  def _make_asset(self, contents):\n",
                    "    filename = tempfile.mktemp(prefix=self.get_temp_dir())\n",
                    "    with open(filename, \"w\") as f:\n",
                    "      f.write(contents)\n",
                    "    return filename\n",
                    "\n",
                    "  @test_util.run_in_graph_and_eager_modes\n",
                    "  def test_assets(self, cycles):\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "1c5b5e8d8deb10ffc613aff016f4caaed7dc5b30",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Wed Mar 1 13:47:02 2017 -0800",
                "file_path": "tensorflow/python/debug/lib/source_utils_test.py",
                "line": 225,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      source_utils.annotate_source(self.dump, self.curr_file_path)\n",
                    "\n",
                    "  def testCallingAnnotateSourceOnUnrelatedSourceFileDoesNotError(self):\n",
                    "    # Create an unrelated source file.\n",
                    "    unrelated_source_path = tempfile.mktemp()\n",
                    "    with open(unrelated_source_path, \"wt\") as source_file:\n",
                    "      source_file.write(\"print('hello, world')\\n\")\n",
                    "\n",
                    "    self.assertEqual({},\n",
                    "                     source_utils.annotate_source(self.dump,\n",
                    "                                                  unrelated_source_path))\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "c96841dbd199d3c1a15a89e8c44c7c1d164968b9",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Wed Sep 19 15:40:18 2018 -0700",
                "file_path": "tensorflow/python/framework/test_util.py",
                "line": 1918,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      made during this context.\n",
                    "    \"\"\"\n",
                    "    stream.flush()\n",
                    "    fd = stream.fileno()\n",
                    "    tmp_file_path = tempfile.mktemp(dir=self.get_temp_dir())\n",
                    "    tmp_file = open(tmp_file_path, \"w\")\n",
                    "    orig_fd = os.dup(fd)\n",
                    "    os.dup2(tmp_file.fileno(), fd)\n",
                    "    try:\n",
                    "      yield CapturedWrites(tmp_file_path)\n",
                    "    finally:\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "609b2ce3fe8ebecf4031670b8c2186468369b0ba",
                "author": "Pavithra Vijay",
                "email": "psv@google.com",
                "date": "Thu May 17 21:36:39 2018 -0700",
                "file_path": "tensorflow/python/keras/utils/data_utils.py",
                "line": 151,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).\nThis file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "\n",
                    "    if is_match_fn(file_path):\n",
                    "      with open_fn(file_path) as archive:\n",
                    "        try:\n",
                    "          archive.extractall(path)\n",
                    "        except (tarfile.TarError, RuntimeError, KeyboardInterrupt):\n",
                    "          if os.path.exists(path):\n",
                    "            if os.path.isfile(path):\n",
                    "              os.remove(path)\n",
                    "            else:\n",
                    "              shutil.rmtree(path)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "0c6fd1703eb8f990c8b071471b0105339ccf821d",
                "author": "Pete Warden",
                "email": "petewarden@google.com",
                "date": "Fri Aug 11 14:30:43 2017 -0700",
                "file_path": "tensorflow/examples/speech_commands/input_data.py",
                "line": 245,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "      print()\n",
                    "      statinfo = os.stat(filepath)\n",
                    "      tf.compat.v1.logging.info('Successfully downloaded %s (%d bytes)',\n",
                    "                                filename, statinfo.st_size)\n",
                    "      tarfile.open(filepath, 'r:gz').extractall(dest_directory)\n",
                    "\n",
                    "  def prepare_data_index(self, silence_percentage, unknown_percentage,\n",
                    "                         wanted_words, validation_percentage,\n",
                    "                         testing_percentage):\n",
                    "    \"\"\"Prepares a list of the samples organized by set and label.\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "c1731614e10e5b2a8e77f1ee4565b3185541483c",
                "author": "Yong Tang",
                "email": "yong.tang.github@outlook.com",
                "date": "Sat Aug 11 21:53:56 2018 +0000",
                "file_path": "tensorflow/python/lib/io/file_io_test.py",
                "line": 610,
                "title": "py/overly-permissive-file",
                "message": "Overly permissive mask in chmod sets file to world writable.",
                "preview": [
                    "    self.assertItemsEqual(\n",
                    "        file_io.get_matching_files(os.path.join(dir_path, \"*\", \"file*.txt\")),\n",
                    "        expected_match)\n",
                    "    # Change noread back so that it could be cleaned during tearDown.\n",
                    "    os.chmod(noread_path, 0o777)\n",
                    "\n",
                    "  def testFileSeekableWithZip(self):\n",
                    "    # Note: Test case for GitHub issue 27276, issue only exposed in python 3.7+.\n",
                    "    filename = os.path.join(self._base_dir, \"a.npz\")\n",
                    "    np.savez_compressed(filename, {\"a\": 1, \"b\": 2})\n",
                    "    with gfile.GFile(filename, \"rb\") as f:\n"
                ],
                "preview_index": 4,
                "new": true
            }
        ],
        "old_vulns": [
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "b7f370e24222017ddc07af834ac1e99762e76e0e",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Feb 7 14:06:43 2017 -0800",
                "file_path": "tensorflow/python/debug/cli/curses_ui_test.py",
                "line": 94,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "    # Override the default path to the command history file to avoid test\n",
                    "    # concurrency issues.\n",
                    "    self._command_history_store = debugger_cli_common.CommandHistory(\n",
                    "        history_file_path=tempfile.mktemp())\n",
                    "\n",
                    "  # Below, override the _screen_ prefixed member methods that interact with the\n",
                    "  # actual terminal, so that the mock can run in a terminal-less environment.\n",
                    "\n",
                    "  # TODO(cais): Search for a way to have a mock terminal object that behaves\n",
                    "  # like the actual terminal, so that we can test the terminal interaction\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "9c390e1697fc463949b90ac4348254fdd482274b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Dec 13 15:42:32 2016 -0800",
                "file_path": "tensorflow/python/debug/cli/curses_ui_test.py",
                "line": 1223,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "                     ui.toasts[4])\n",
                    "    self.assertEqual(\"ERROR: Empty indices.\", ui.toasts[6])\n",
                    "\n",
                    "  def testWriteScreenOutputToFileWorks(self):\n",
                    "    output_path = tempfile.mktemp()\n",
                    "\n",
                    "    ui = MockCursesUI(\n",
                    "        40,\n",
                    "        80,\n",
                    "        command_sequence=[\n",
                    "            string_to_codes(\"babble -n 2>%s\\n\" % output_path),\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "9c390e1697fc463949b90ac4348254fdd482274b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Dec 13 15:42:32 2016 -0800",
                "file_path": "tensorflow/python/debug/cli/curses_ui_test.py",
                "line": 1260,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "    self.assertEqual([\"ERROR: Redirect file path is empty\"], ui.toasts)\n",
                    "    self.assertEqual(0, len(ui.unwrapped_outputs))\n",
                    "\n",
                    "  def testAppendingRedirectErrors(self):\n",
                    "    output_path = tempfile.mktemp()\n",
                    "\n",
                    "    ui = MockCursesUI(\n",
                    "        40,\n",
                    "        80,\n",
                    "        command_sequence=[\n",
                    "            string_to_codes(\"babble -n 2 >> %s\\n\" % output_path),\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "b2607d7c599c8d0d3eed3f712a02dc19eb7d2087",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Feb 14 07:39:49 2017 -0800",
                "file_path": "tensorflow/python/debug/lib/debug_data_test.py",
                "line": 154,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "class DebugDumpDirTest(test_util.TensorFlowTestCase):\n",
                    "\n",
                    "  def setUp(self):\n",
                    "    self._dump_root = tempfile.mktemp()\n",
                    "    os.mkdir(self._dump_root)\n",
                    "\n",
                    "  def tearDown(self):\n",
                    "    # Tear down temporary dump directory.\n",
                    "    file_io.delete_recursively(self._dump_root)\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "b2607d7c599c8d0d3eed3f712a02dc19eb7d2087",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Feb 14 07:39:49 2017 -0800",
                "file_path": "tensorflow/python/debug/lib/debug_data_test.py",
                "line": 186,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "        gpu_1_dir, \"node_foo_1_2_DebugIdentity_1472563253536387\"), \"wb\")\n",
                    "\n",
                    "  def testDebugDumpDir_nonexistentDumpRoot(self):\n",
                    "    with self.assertRaisesRegexp(IOError, \"does not exist\"):\n",
                    "      debug_data.DebugDumpDir(tempfile.mktemp() + \"_foo\")\n",
                    "\n",
                    "  def testDebugDumpDir_invalidFileNamingPattern(self):\n",
                    "    # File name with too few underscores should lead to an exception.\n",
                    "    device_dir = os.path.join(\n",
                    "        self._dump_root,\n",
                    "        debug_data.METADATA_FILE_PREFIX + debug_data.DEVICE_TAG +\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "9c390e1697fc463949b90ac4348254fdd482274b",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Dec 13 15:42:32 2016 -0800",
                "file_path": "tensorflow/python/debug/cli/debugger_cli_common_test.py",
                "line": 256,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "        [\"Roses are red\", \"Violets are blue\"],\n",
                    "        font_attr_segs={0: [(0, 5, \"red\")],\n",
                    "                        1: [(0, 7, \"blue\")]})\n",
                    "\n",
                    "    file_path = tempfile.mktemp()\n",
                    "    screen_output.write_to_file(file_path)\n",
                    "\n",
                    "    with gfile.Open(file_path, \"r\") as f:\n",
                    "      self.assertEqual(\"Roses are red\\nViolets are blue\\n\", f.read())\n",
                    "\n",
                    "    # Clean up.\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "b7f370e24222017ddc07af834ac1e99762e76e0e",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Tue Feb 7 14:06:43 2017 -0800",
                "file_path": "tensorflow/python/debug/cli/debugger_cli_common_test.py",
                "line": 933,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "class CommandHistoryTest(test_util.TensorFlowTestCase):\n",
                    "\n",
                    "  def setUp(self):\n",
                    "    self._history_file_path = tempfile.mktemp()\n",
                    "    self._cmd_hist = debugger_cli_common.CommandHistory(\n",
                    "        limit=3, history_file_path=self._history_file_path)\n",
                    "\n",
                    "  def tearDown(self):\n",
                    "    if os.path.isfile(self._history_file_path):\n",
                    "      os.remove(self._history_file_path)\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "5c93dbdb336e762910717ecdadd7d48a8e629115",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Fri Oct 14 10:02:44 2016 -0800",
                "file_path": "tensorflow/python/debug/wrappers/local_cli_wrapper.py",
                "line": 87,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "    framework.BaseDebugWrapperSession.__init__(\n",
                    "        self, sess, thread_name_filter=thread_name_filter)\n",
                    "\n",
                    "    if not dump_root:\n",
                    "      self._dump_root = tempfile.mktemp(prefix=_DUMP_ROOT_PREFIX)\n",
                    "    else:\n",
                    "      dump_root = os.path.expanduser(dump_root)\n",
                    "      if os.path.isfile(dump_root):\n",
                    "        raise ValueError(\"dump_root path points to a file: %s\" % dump_root)\n",
                    "      elif os.path.isdir(dump_root) and os.listdir(dump_root):\n",
                    "        raise ValueError(\"dump_root path points to a non-empty directory: %s\" %\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "5c93dbdb336e762910717ecdadd7d48a8e629115",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Fri Oct 14 10:02:44 2016 -0800",
                "file_path": "tensorflow/python/debug/wrappers/local_cli_wrapper_test.py",
                "line": 142,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "@test_util.run_v1_only(\"b/120545219\")\n",
                    "class LocalCLIDebugWrapperSessionTest(test_util.TensorFlowTestCase):\n",
                    "\n",
                    "  def setUp(self):\n",
                    "    self._tmp_dir = tempfile.mktemp()\n",
                    "\n",
                    "    self.v = variables.VariableV1(10.0, name=\"v\")\n",
                    "    self.w = variables.VariableV1(21.0, name=\"w\")\n",
                    "    self.delta = constant_op.constant(1.0, name=\"delta\")\n",
                    "    self.inc_v = state_ops.assign_add(self.v, self.delta, name=\"inc_v\")\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "dc1aab20a12e2d32a10f019a5de3f65f56345fa8",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Fri Oct 12 18:13:58 2018 -0700",
                "file_path": "tensorflow/python/kernel_tests/logging_ops_test.py",
                "line": 311,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      self.assertTrue((expected + \"\\n\") in printed.contents())\n",
                    "\n",
                    "  @test_util.run_in_graph_and_eager_modes()\n",
                    "  def testPrintTensorsToFile(self):\n",
                    "    tmpfile_name = tempfile.mktemp(\".printv2_test\")\n",
                    "    tensor_0 = math_ops.range(0, 10)\n",
                    "    print_op_0 = logging_ops.print_v2(tensor_0,\n",
                    "                                      output_stream=\"file://\"+tmpfile_name)\n",
                    "    self.evaluate(print_op_0)\n",
                    "    tensor_1 = math_ops.range(11, 20)\n",
                    "    print_op_1 = logging_ops.print_v2(tensor_1,\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "1cf9f7ab2fd019531629b266e7d0863b0d6417ce",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Sun Oct 15 18:15:53 2017 -0700",
                "file_path": "tensorflow/python/debug/cli/readline_ui_test.py",
                "line": 40,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "\n",
                    "  def __init__(self, on_ui_exit=None, command_sequence=None):\n",
                    "    readline_ui.ReadlineUI.__init__(\n",
                    "        self, on_ui_exit=on_ui_exit,\n",
                    "        config=cli_config.CLIConfig(config_file_path=tempfile.mktemp()))\n",
                    "\n",
                    "    self._command_sequence = command_sequence\n",
                    "    self._command_counter = 0\n",
                    "\n",
                    "    self.observers = {\"screen_outputs\": []}\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "6c6121d09966e088a8a60263c010873ede6023d4",
                "author": "Shanqing Cai",
                "email": "cais@google.com",
                "date": "Fri Jan 6 09:03:31 2017 -0800",
                "file_path": "tensorflow/python/debug/cli/readline_ui_test.py",
                "line": 171,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "    self.assertEqual(0, len(ui.observers[\"screen_outputs\"]))\n",
                    "    self.assertTrue(observer[\"callback_invoked\"])\n",
                    "\n",
                    "  def testIncompleteRedirectWorks(self):\n",
                    "    output_path = tempfile.mktemp()\n",
                    "\n",
                    "    ui = MockReadlineUI(\n",
                    "        command_sequence=[\"babble -n 2 > %s\" % output_path, \"exit\"])\n",
                    "\n",
                    "    ui.register_command_handler(\"babble\", self._babble, \"\")\n",
                    "    ui.run_ui()\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "61c6c84964b4aec80aeace187aab8cb2c3e55a72",
                "author": "Austin Anderson",
                "email": "angerson@google.com",
                "date": "Wed Oct 31 14:16:59 2018 -0700",
                "file_path": "tensorflow/lite/schema/upgrade_schema_test.py",
                "line": 257,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "class TestSchemaUpgrade(test_util.TensorFlowTestCase):\n",
                    "\n",
                    "  def testNonExistentFile(self):\n",
                    "    converter = upgrade_schema_lib.Converter()\n",
                    "    non_existent = tempfile.mktemp(suffix=\".json\")\n",
                    "    with self.assertRaisesRegexp(IOError, \"No such file or directory\"):\n",
                    "      converter.Convert(non_existent, non_existent)\n",
                    "\n",
                    "  def testInvalidExtension(self):\n",
                    "    converter = upgrade_schema_lib.Converter()\n",
                    "    invalid_extension = tempfile.mktemp(suffix=\".foo\")\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-d25dd807485c-2020-01-03",
                "sha": "61c6c84964b4aec80aeace187aab8cb2c3e55a72",
                "author": "Austin Anderson",
                "email": "angerson@google.com",
                "date": "Wed Oct 31 14:16:59 2018 -0700",
                "file_path": "tensorflow/lite/schema/upgrade_schema_test.py",
                "line": 263,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      converter.Convert(non_existent, non_existent)\n",
                    "\n",
                    "  def testInvalidExtension(self):\n",
                    "    converter = upgrade_schema_lib.Converter()\n",
                    "    invalid_extension = tempfile.mktemp(suffix=\".foo\")\n",
                    "    with self.assertRaisesRegexp(ValueError, \"Invalid extension on input\"):\n",
                    "      converter.Convert(invalid_extension, invalid_extension)\n",
                    "    with tempfile.NamedTemporaryFile(suffix=\".json\", mode=\"w+\") as in_json:\n",
                    "      JsonDumpAndFlush(EMPTY_TEST_SCHEMA_V1, in_json)\n",
                    "      with self.assertRaisesRegexp(ValueError, \"Invalid extension on output\"):\n",
                    "        converter.Convert(in_json.name, invalid_extension)\n"
                ],
                "preview_index": 4,
                "new": false
            }
        ]
    },
    "database-5a7786812dd4-2024-01-11": {
        "sha": "5a7786812dd4",
        "date": "2024-01-11",
        "new_vulns": [
            {
                "scan_file": "database-5a7786812dd4-2024-01-11",
                "sha": "a25c899dcc938c36b2ca8b77393001cd59fd9b97",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Fri Dec 20 18:39:50 2019 -0800",
                "file_path": "tensorflow/compiler/mlir/tensorflow/tests/tf_saved_model/common_v1.py",
                "line": 91,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      raise app.UsageError('Too many command-line arguments.')\n",
                    "    if FLAGS.save_model_path:\n",
                    "      save_model_path = FLAGS.save_model_path\n",
                    "    else:\n",
                    "      save_model_path = tempfile.mktemp(suffix='.saved_model')\n",
                    "\n",
                    "    signature_def_map, init_op, assets_collection = create_signature()\n",
                    "\n",
                    "    sess = tf.Session()\n",
                    "    sess.run(tf.initializers.global_variables())\n",
                    "    builder = tf.saved_model.builder.SavedModelBuilder(save_model_path)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-5a7786812dd4-2024-01-11",
                "sha": "609b2ce3fe8ebecf4031670b8c2186468369b0ba",
                "author": "Pavithra Vijay",
                "email": "psv@google.com",
                "date": "Thu May 17 21:36:39 2018 -0700",
                "file_path": "tensorflow/python/keras/utils/data_utils.py",
                "line": 135,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).\nThis file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "\n",
                    "    if is_match_fn(file_path):\n",
                    "      with open_fn(file_path) as archive:\n",
                    "        try:\n",
                    "          archive.extractall(path)\n",
                    "        except (tarfile.TarError, RuntimeError, KeyboardInterrupt):\n",
                    "          if os.path.exists(path):\n",
                    "            if os.path.isfile(path):\n",
                    "              os.remove(path)\n",
                    "            else:\n",
                    "              shutil.rmtree(path)\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-5a7786812dd4-2024-01-11",
                "sha": "0c6fd1703eb8f990c8b071471b0105339ccf821d",
                "author": "Pete Warden",
                "email": "petewarden@google.com",
                "date": "Fri Aug 11 14:30:43 2017 -0700",
                "file_path": "tensorflow/examples/speech_commands/input_data.py",
                "line": 240,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "      statinfo = os.stat(filepath)\n",
                    "      tf.compat.v1.logging.info(\n",
                    "          'Successfully downloaded {0} ({1} bytes)'.format(\n",
                    "              filename, statinfo.st_size))\n",
                    "      tarfile.open(filepath, 'r:gz').extractall(dest_directory)\n",
                    "\n",
                    "  def prepare_data_index(self, silence_percentage, unknown_percentage,\n",
                    "                         wanted_words, validation_percentage,\n",
                    "                         testing_percentage):\n",
                    "    \"\"\"Prepares a list of the samples organized by set and label.\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": true
            },
            {
                "scan_file": "database-5a7786812dd4-2024-01-11",
                "sha": "5a7786812dd4cb4511e8ef85b12017cf3d2ae08d",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Thu Jan 11 13:03:13 2024 -0800",
                "file_path": "tensorflow/tools/pip_package/v2/utils/utils.py",
                "line": 78,
                "title": "py/overly-permissive-file",
                "message": "Overly permissive mask in chmod sets file to world readable.",
                "preview": [
                    "    dest = dest.removeprefix(strip)\n",
                    "  dest_dir_path = os.path.join(dst_dir, os.path.dirname(dest))\n",
                    "  os.makedirs(dest_dir_path, exist_ok=True)\n",
                    "  shutil.copy(src_file, dest_dir_path)\n",
                    "  os.chmod(os.path.join(dst_dir, dest), 0o644)\n"
                ],
                "preview_index": 4,
                "new": true
            }
        ],
        "old_vulns": []
    },
    "database-a632c89dd778-2024-06-07": {
        "sha": "a632c89dd778",
        "date": "2024-06-07",
        "new_vulns": [
            {
                "scan_file": "database-a632c89dd778-2024-06-07",
                "sha": "40a00a61fc9c85e4af61178026b6ed3d5bb2a90f",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Wed Mar 6 13:46:53 2024 -0800",
                "file_path": "tensorflow/tools/pip_package/utils/utils.py",
                "line": 78,
                "title": "py/overly-permissive-file",
                "message": "Overly permissive mask in chmod sets file to world readable.",
                "preview": [
                    "    dest = dest.removeprefix(strip)\n",
                    "  dest_dir_path = os.path.join(dst_dir, os.path.dirname(dest))\n",
                    "  os.makedirs(dest_dir_path, exist_ok=True)\n",
                    "  shutil.copy(src_file, dest_dir_path)\n",
                    "  os.chmod(os.path.join(dst_dir, dest), 0o644)\n"
                ],
                "preview_index": 4,
                "new": true
            }
        ],
        "old_vulns": [
            {
                "scan_file": "database-a632c89dd778-2024-06-07",
                "sha": "a25c899dcc938c36b2ca8b77393001cd59fd9b97",
                "author": "A. Unique TensorFlower",
                "email": "gardener@tensorflow.org",
                "date": "Fri Dec 20 18:39:50 2019 -0800",
                "file_path": "tensorflow/compiler/mlir/tensorflow/tests/tf_saved_model/common_v1.py",
                "line": 91,
                "title": "py/insecure-temporary-file",
                "message": "Call to deprecated function tempfile.mktemp may be insecure.",
                "preview": [
                    "      raise app.UsageError('Too many command-line arguments.')\n",
                    "    if FLAGS.save_model_path:\n",
                    "      save_model_path = FLAGS.save_model_path\n",
                    "    else:\n",
                    "      save_model_path = tempfile.mktemp(suffix='.saved_model')\n",
                    "\n",
                    "    signature_def_map, init_op, assets_collection = create_signature()\n",
                    "\n",
                    "    sess = tf.Session()\n",
                    "    sess.run(tf.initializers.global_variables())\n",
                    "    builder = tf.saved_model.builder.SavedModelBuilder(save_model_path)\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-a632c89dd778-2024-06-07",
                "sha": "609b2ce3fe8ebecf4031670b8c2186468369b0ba",
                "author": "Pavithra Vijay",
                "email": "psv@google.com",
                "date": "Thu May 17 21:36:39 2018 -0700",
                "file_path": "tensorflow/python/keras/utils/data_utils.py",
                "line": 135,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).\nThis file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "\n",
                    "    if is_match_fn(file_path):\n",
                    "      with open_fn(file_path) as archive:\n",
                    "        try:\n",
                    "          archive.extractall(path)\n",
                    "        except (tarfile.TarError, RuntimeError, KeyboardInterrupt):\n",
                    "          if os.path.exists(path):\n",
                    "            if os.path.isfile(path):\n",
                    "              os.remove(path)\n",
                    "            else:\n",
                    "              shutil.rmtree(path)\n"
                ],
                "preview_index": 4,
                "new": false
            },
            {
                "scan_file": "database-a632c89dd778-2024-06-07",
                "sha": "0c6fd1703eb8f990c8b071471b0105339ccf821d",
                "author": "Pete Warden",
                "email": "petewarden@google.com",
                "date": "Fri Aug 11 14:30:43 2017 -0700",
                "file_path": "tensorflow/examples/speech_commands/input_data.py",
                "line": 240,
                "title": "py/tarslip",
                "message": "This file extraction depends on a [potentially untrusted source](1).",
                "preview": [
                    "      statinfo = os.stat(filepath)\n",
                    "      tf.compat.v1.logging.info(\n",
                    "          'Successfully downloaded {0} ({1} bytes)'.format(\n",
                    "              filename, statinfo.st_size))\n",
                    "      tarfile.open(filepath, 'r:gz').extractall(dest_directory)\n",
                    "\n",
                    "  def prepare_data_index(self, silence_percentage, unknown_percentage,\n",
                    "                         wanted_words, validation_percentage,\n",
                    "                         testing_percentage):\n",
                    "    \"\"\"Prepares a list of the samples organized by set and label.\n",
                    "\n"
                ],
                "preview_index": 4,
                "new": false
            }
        ]
    }
}